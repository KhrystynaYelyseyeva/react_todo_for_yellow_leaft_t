{"version":3,"sources":["api/initialSrate.js","store/todos.js","store/index.js","shapes/TodoShape.js","components/MainPage/TodoList/Todo/Todo.js","components/MainPage/TodoList/TodoList.js","components/Input/Input.js","components/Select/Select.js","components/MainPage/NewTodoForm/NewTodoForm.js","components/MainPage/MainPage.js","components/Header/HeaderBurger/HeaderBurger.js","themes/themes.js","context/ThemeContext.js","components/Header/ThemeButton/ThemeButton.js","components/Header/Header.js","components/Sidebar/Logo/Logo.js","components/Sidebar/SidebarBurger/SidebarBurger.js","components/Sidebar/Sidebar.js","components/Contact/ContactButton/ContactButton.js","shapes/FormDataShape.js","shapes/FormErrorsShape.js","components/Contact/ContactForm/ContactForm.js","components/Contact/Contact.js","components/CompletedPage/CompletedPage.js","components/Filters/Filters.js","App.js","index.js"],"names":["state","todos","id","title","category","completed","categories","filteredTodos","ADD","COMPLETE","UPDATE","DELETE","FILTER_BY_CATEGORY","FILTER_BY_QUERY","FILTER_BY_COMPLETED","actions","todo","type","todoId","newTitle","query","queryRegular","RegExp","todosReducer","initialState","action","map","currentCompleted","filter","test","getTodos","todosState","getFilteredTodos","reducer","combineReducers","store","createStore","PropTypes","shape","number","isRequired","string","bool","Todo","memo","onTodoDelete","onTodoUpdate","onTodoComplete","className","checked","readOnly","onChange","classNames","value","target","onClick","TodoList","isFilter","todoList","Input","name","placeholder","required","classNameLabel","labelText","htmlFor","propTypes","func","defaultProps","Select","defaultValue","NewTodoForm","addTodo","newId","useState","setCategory","setTitle","titleError","setTitleError","categoryError","setCategoryError","onSubmit","event","preventDefault","trim","MainPage","onFilter","useEffect","length","HeaderBurger","handleOpenSidebar","themes","light","dark","getTheme","theme","tag","ThemeContext","createContext","setTheme","ThemeProvider","children","contextValue","useMemo","Provider","ThemeButton","useContext","current","Header","Logo","viewBox","d","SidebarBurger","Sidebar","handleOpenContact","isOpenSidebar","to","exact","activeClassName","ContactButton","text","userName","email","massage","userNameError","emailError","ContactForm","handleCancel","handleSubmit","formData","errors","handleChange","handleReset","handleBlur","onBlur","initialData","Contact","setFormData","setErrors","isSuccess","setIsSuccess","patternEmail","useCallback","oldData","oldErrors","CompletedPage","onTodosFilterCompleted","match","params","Filters","onTodosFilterByCategory","onTodosFilterByQuery","setQuery","App","dispatch","useDispatch","useSelector","setIsFilter","setIsOpenSidebar","isOpenContact","setIsOpenContact","todosActions","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.66641f48.chunk.js","sourcesContent":["const state = {\n  todos: [\n    {\n      id: 1,\n      title: 'learn TypeScript',\n      category: 'education',\n      completed: false,\n    },\n    {\n      id: 2,\n      category: 'health',\n      title: 'provide a blood test',\n      completed: true,\n    },\n  ],\n  categories: ['education', 'health', 'fun'],\n  filteredTodos: [],\n};\n\nexport default state;\n","import initialState from '../api/initialSrate';\n\nconst ADD = 'todos/ADD';\nconst COMPLETE = 'todos/COMPLETE';\nconst UPDATE = 'todos/UPDATE';\nconst DELETE = 'todos/DELETE';\nconst FILTER_BY_CATEGORY = 'todos/FILTER_BY_CATEGORY';\nconst FILTER_BY_QUERY = 'todos/FILTER_BY_QUERY';\nconst FILTER_BY_COMPLETED = 'todos/FILTER_BY_COMPLETED';\n\nexport const actions = {\n  add: todo => ({\n    type: ADD,\n    todo,\n  }),\n  complete: todoId => ({\n    type: COMPLETE,\n    todoId,\n  }),\n  update: (todoId, newTitle) => ({\n    type: UPDATE,\n    todoId,\n    newTitle,\n  }),\n  delete: todoId => ({\n    type: DELETE,\n    todoId,\n  }),\n  filterByCategory: category => ({\n    type: FILTER_BY_CATEGORY,\n    category,\n  }),\n  filterByQuery: query => ({\n    type: FILTER_BY_QUERY,\n    queryRegular: new RegExp(query, 'gi'),\n  }),\n  filterByCompleted: completed => ({\n    type: FILTER_BY_COMPLETED,\n    completed,\n  }),\n};\n\nconst todosReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD:\n      return {\n        ...state,\n        todos: [...state.todos, action.todo],\n      };\n    case COMPLETE:\n      return {\n        ...state,\n        todos: state.todos.map((todo) => {\n          if (todo.id === action.todoId) {\n            const currentCompleted = todo.completed;\n\n            return {\n              ...todo,\n              completed: !currentCompleted,\n            };\n          }\n\n          return todo;\n        }),\n      };\n    case UPDATE:\n      return {\n        ...state,\n        todos: state.todos.map((todo) => {\n          if (todo.id === action.todoId) {\n            return {\n              ...todo,\n              title: action.newTitle,\n            };\n          }\n\n          return todo;\n        }),\n      };\n    case DELETE:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.todoId),\n      };\n    case FILTER_BY_CATEGORY:\n      return {\n        ...state,\n        filteredTodos: state.todos\n          .filter(todo => todo.category === action.category),\n      };\n    case FILTER_BY_QUERY:\n      return {\n        ...state,\n        filteredTodos: state.todos\n          .filter(todo => action.queryRegular.test(todo.title)),\n      };\n    case FILTER_BY_COMPLETED:\n      return {\n        ...state,\n        filteredTodos: state.todos\n          .filter(todo => todo.completed === action.completed),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, combineReducers } from 'redux';\n\nimport todosReducer from './todos';\n\n// #region selectors\nexport function getTodos(state) {\n  return state.todosState.todos;\n}\n\nexport function getFilteredTodos(state) {\n  return state.todosState.filteredTodos;\n}\n// #endregin\n\nconst reducer = combineReducers({\n  todosState: todosReducer,\n});\n\nconst store = createStore(reducer);\n\nexport default store;\n","import PropTypes from 'prop-types';\n\nexport const TodoShape = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  category: PropTypes.string.isRequired,\n});\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport { TodoShape } from '../../../../shapes/TodoShape';\n\nimport './Todo.scss';\n\nexport const Todo = memo(({\n  todo,\n  onTodoDelete,\n  onTodoUpdate,\n  onTodoComplete,\n}) => {\n  const { id, title, completed, category } = todo;\n\n  return (\n    <div className=\"Todo\">\n      <label className=\"Todo__checkbox-label\">\n        <input\n          className=\"Todo__checkbox\"\n          type=\"checkbox\"\n          checked={completed}\n          readOnly\n          onChange={() => onTodoComplete(id)}\n        />\n        <span />\n      </label>\n\n      <label className=\"Todo__title-label\">\n        <input\n          className={classNames(\n            'Todo__title',\n            {\n              'Todo__title--is-completed': completed,\n            },\n          )}\n          type=\"text\"\n          value={title}\n          onChange={({ target }) => onTodoUpdate(id, target.value)}\n        />\n      </label>\n\n      <span className={classNames(\n        'Todo__category',\n        {\n          'Todo__category--is-completed': completed,\n        },\n      )}\n      >\n        {category}\n      </span>\n\n      <button\n        className=\"Todo__delete-btn\"\n        type=\"button\"\n        onClick={() => onTodoDelete(id)}\n      >\n        X\n      </button>\n    </div>\n  );\n});\n\nTodo.propTypes = {\n  todo: TodoShape.isRequired,\n  onTodoUpdate: PropTypes.func.isRequired,\n  onTodoDelete: PropTypes.func.isRequired,\n  onTodoComplete: PropTypes.func.isRequired,\n};\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport { TodoShape } from '../../../shapes/TodoShape';\nimport { Todo } from './Todo/Todo';\n\nexport const TodoList = memo(({\n  isFilter,\n  todos,\n  filteredTodos,\n  onTodoDelete,\n  onTodoComplete,\n  onTodoUpdate,\n}) => {\n  const todoList = isFilter ? filteredTodos : todos;\n\n  return (\n    <ul className=\"list\">\n      {\n        todoList.map(todo => (\n          <li\n            className={\n              classNames('list__item item',\n                { 'item--completed': todo.completed })\n            }\n            key={todo.id}\n          >\n            <Todo\n              todo={todo}\n              onTodoComplete={onTodoComplete}\n              onTodoUpdate={onTodoUpdate}\n              onTodoDelete={onTodoDelete}\n            />\n          </li>\n        ))\n      }\n    </ul>\n  );\n});\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(TodoShape).isRequired,\n  filteredTodos: PropTypes.arrayOf(TodoShape).isRequired,\n  isFilter: PropTypes.bool.isRequired,\n  onTodoUpdate: PropTypes.func.isRequired,\n  onTodoDelete: PropTypes.func.isRequired,\n  onTodoComplete: PropTypes.func.isRequired,\n};\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Input = memo(({\n  name,\n  value,\n  onChange,\n  placeholder,\n  className,\n  type,\n  required,\n  classNameLabel,\n  labelText,\n}) => (\n  <label htmlFor={name} className={classNameLabel}>\n    {labelText}\n    <input\n      type={type}\n      name={name}\n      id={name}\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      className={className}\n      required={required}\n    />\n  </label>\n));\n\nInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n  type: PropTypes.string,\n  labelText: PropTypes.string,\n  className: PropTypes.string.isRequired,\n  classNameLabel: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  required: PropTypes.bool,\n};\n\nInput.defaultProps = {\n  placeholder: '',\n  classNameLabel: '',\n  labelText: '',\n  type: 'text',\n  required: false,\n};\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport state from '../../api/initialSrate';\n\nexport const Select = memo(({\n  name,\n  value,\n  onChange,\n  className,\n  defaultValue,\n}) => (\n  <label htmlFor={name} className={`${className}-label`}>\n    <select\n      name={name}\n      id={name}\n      value={value}\n      onChange={onChange}\n      className={className}\n    >\n      <option value=\"\">\n        {defaultValue}\n      </option>\n      {state.categories.map(category => (\n        <option value={category} key={category}>\n          {category}\n        </option>\n      ))}\n    </select>\n  </label>\n));\n\nSelect.propTypes = {\n  name: PropTypes.string.isRequired,\n  defaultValue: PropTypes.string,\n  className: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nSelect.defaultProps = {\n  defaultValue: 'Choose category',\n};\n","import React, { useState, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from '../../Input/Input';\nimport { Select } from '../../Select/Select';\n\nimport './NewTodoForm.scss';\n\nexport const NewTodoForm = memo(({ addTodo, newId }) => {\n  const [category, setCategory] = useState('');\n  const [title, setTitle] = useState('');\n  const [titleError, setTitleError] = useState(false);\n  const [categoryError, setCategoryError] = useState(false);\n\n  const handleChangeInput = ({ target }) => {\n    setTitle(target.value);\n    setTitleError(false);\n  };\n\n  const handleChangeSelector = ({ target }) => {\n    setCategory(target.value);\n    setCategoryError(false);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (!title.trim()) {\n      setTitleError(true);\n\n      return;\n    }\n\n    if (!category) {\n      setCategoryError(true);\n\n      return;\n    }\n\n    addTodo({\n      title,\n      category,\n      completed: false,\n      id: newId,\n    });\n\n    setCategory('');\n    setTitle('');\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className=\"NewTodoForm\">\n        <Input\n          className=\"NewTodoForm__input\"\n          classNameLabel=\"NewTodoForm__input-label\"\n          value={title}\n          name=\"title\"\n          placeholder=\"Enter new task\"\n          onChange={handleChangeInput}\n        />\n        <Select\n          className=\"NewTodoForm__select\"\n          value={category}\n          name=\"category\"\n          onChange={handleChangeSelector}\n        />\n        <button type=\"submit\" className=\"NewTodoForm__btn\">\n          +\n        </button>\n      </form>\n      {titleError && (\n        <span className=\"Error-massage\">Please enter the title</span>\n      )}\n      {categoryError && (\n        <span className=\"Error-massage\">Please choose the category</span>\n      )}\n    </>\n  );\n});\n\nNewTodoForm.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n  newId: PropTypes.number.isRequired,\n};\n","import React, { memo, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TodoShape } from '../../shapes/TodoShape';\nimport { TodoList } from './TodoList/TodoList';\nimport { NewTodoForm } from './NewTodoForm/NewTodoForm';\n\nimport './MainPage.scss';\n\nconst INCREMENT_NEW_ID = 1;\n\nexport const MainPage = memo(({\n  addTodo,\n  isFilter,\n  onFilter,\n  todos,\n  filteredTodos,\n  onTodoDelete,\n  onTodoUpdate,\n  onTodoComplete,\n}) => {\n  useEffect(() => {\n    onFilter(false);\n  }, []);\n\n  return (\n    <div className=\"MainPage\">\n      <NewTodoForm\n        addTodo={addTodo}\n        newId={todos.length + INCREMENT_NEW_ID}\n      />\n      {!!todos.length && (\n        <TodoList\n          isFilter={isFilter}\n          todos={todos}\n          filteredTodos={filteredTodos}\n          onTodoUpdate={onTodoUpdate}\n          onTodoDelete={onTodoDelete}\n          onTodoComplete={onTodoComplete}\n        />\n      )}\n    </div>\n  );\n});\n\nMainPage.propTypes = {\n  todos: PropTypes.arrayOf(TodoShape).isRequired,\n  filteredTodos: PropTypes.arrayOf(TodoShape).isRequired,\n  isFilter: PropTypes.bool.isRequired,\n  addTodo: PropTypes.func.isRequired,\n  onFilter: PropTypes.func.isRequired,\n  onTodoUpdate: PropTypes.func.isRequired,\n  onTodoDelete: PropTypes.func.isRequired,\n  onTodoComplete: PropTypes.func.isRequired,\n};\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './HeaderBurger.scss';\n\nexport const HeaderBurger = memo(({ handleOpenSidebar }) => (\n  <button\n    type=\"button\"\n    className=\"HeaderBurger\"\n    onClick={handleOpenSidebar}\n  >\n    <div className=\"HeaderBurger__line HeaderBurger__line--first\" />\n    <div className=\"HeaderBurger__line HeaderBurger__line--second\" />\n    <div className=\"HeaderBurger__line HeaderBurger__line--third\" />\n  </button>\n));\n\nHeaderBurger.propTypes = {\n  handleOpenSidebar: PropTypes.func.isRequired,\n};\n","const themes = {\n  light: {\n    'app.body': 'App--light',\n    'theme.button': 'ThemeButton--light',\n    'sidebar.body': 'Sidebar--light',\n  },\n  dark: {\n    'app.body': 'App--dark',\n    'theme.button': 'ThemeButton--dark',\n    'sidebar.body': 'Sidebar--dark',\n  },\n};\n\nexport const getTheme = (theme, tag) => themes[theme][tag];\n","import React, { useMemo, useState, createContext } from 'react';\nimport { getTheme } from '../themes/themes';\n\nexport const ThemeContext = createContext({\n  theme: 'light',\n  setTheme: () => {},\n});\n\n// eslint-disable-next-line react/prop-types\nexport const ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState('light');\n\n  const contextValue = useMemo(() => ({\n    theme,\n    setTheme,\n  }), [theme]);\n\n  return (\n    <ThemeContext.Provider value={contextValue}>\n      <div className={`App ${getTheme(contextValue.theme, 'app.body')}`}>\n        {children}\n      </div>\n    </ThemeContext.Provider>\n  );\n};\n","import React, { memo, useContext } from 'react';\n\nimport { ThemeContext } from '../../../context/ThemeContext';\nimport { getTheme } from '../../../themes/themes';\n\nimport './ThemeButton.scss';\n\nexport const ThemeButton = memo(() => {\n  const { theme, setTheme } = useContext(ThemeContext);\n\n  const handleThemeChange = () => {\n    setTheme((current) => {\n      if (current === 'dark') {\n        return 'light';\n      }\n\n      return 'dark';\n    });\n  };\n\n  return (\n    <button\n      type=\"button\"\n      className={`ThemeButton ${getTheme(theme, 'theme.button')}`}\n      onClick={handleThemeChange}\n    >\n      switch&nbsp;\n      <span>\n        {theme === 'dark' ? 'light' : 'dark'}\n      </span>\n    </button>\n  );\n});\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { HeaderBurger } from './HeaderBurger/HeaderBurger';\nimport { ThemeButton } from './ThemeButton/ThemeButton';\n\nimport './Header.scss';\n\nexport const Header = memo(({ handleOpenSidebar }) => (\n  <header className=\"Header\">\n    <HeaderBurger handleOpenSidebar={handleOpenSidebar} />\n\n    <ThemeButton />\n  </header>\n));\n\nHeader.propTypes = {\n  handleOpenSidebar: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport './Logo.scss';\n\nexport const Logo = () => (\n  <svg\n    className=\"Logo\"\n    id=\"icon-logo-leaf\"\n    viewBox=\"0 0 364 604\"\n  >\n    <title>logo</title>\n    {/* eslint-disable-next-line max-len */}\n    <path d=\"M181.9,23.1c0,0,64.6,50.5,111.6,126.9l-85.2,223.2L108.1,98.6h-1C145.3,51.8,181.9,23.1,181.9,23.1z M22.2,302  c0-57.9,22.6-111.7,50.7-156.3l110.2,293.1l-40.5,106.1C95.3,497.1,22.2,406.4,22.2,302z M182.1,580.8l141.5-371  c11.1,28.8,18.2,59.8,18.2,92.2C341.6,454.1,186.1,577.7,182.1,580.8z\" />\n  </svg>\n);\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './SidebarBurger.scss';\n\nexport const SidebarBurger = memo(({ handleOpenSidebar }) => (\n  <button\n    type=\"button\"\n    onClick={handleOpenSidebar}\n    className=\"SidebarBurger\"\n  >\n    <div className=\"SidebarBurger__line\" />\n    <div className=\"SidebarBurger__line\" />\n  </button>\n));\n\nSidebarBurger.propTypes = {\n  handleOpenSidebar: PropTypes.func.isRequired,\n};\n","import React, { memo, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport { NavLink } from 'react-router-dom';\nimport { Logo } from './Logo/Logo';\nimport { SidebarBurger } from './SidebarBurger/SidebarBurger';\n\nimport { ThemeContext } from '../../context/ThemeContext';\nimport { getTheme } from '../../themes/themes';\n\nimport './Sidebar.scss';\n\nexport const Sidebar = memo(({\n  handleOpenContact,\n  handleOpenSidebar,\n  isOpenSidebar,\n}) => {\n  const { theme } = useContext(ThemeContext);\n\n  return (\n    <aside className={classNames(`Sidebar ${getTheme(theme, 'sidebar.body')}`,\n      {\n        'Sidebar--active': isOpenSidebar,\n      })\n    }\n    >\n      <header className=\"Sidebar__header\">\n        <SidebarBurger handleOpenSidebar={handleOpenSidebar} />\n        <Logo />\n      </header>\n\n      <NavLink\n        className=\"Sidebar__link\"\n        to=\"/todos/completed/1\"\n        exact\n        activeClassName=\"Sidebar__link--active\"\n      >\n        Completed todos\n      </NavLink>\n\n      <NavLink\n        className=\"Sidebar__link\"\n        to=\"/todos/completed/0\"\n        exact\n        activeClassName=\"Sidebar__link--active\"\n      >\n        Uncompleted todos\n      </NavLink>\n\n      <button\n        type=\"button\"\n        className=\"Sidebar__contact\"\n        onClick={handleOpenContact}\n      >\n        Contact us\n      </button>\n    </aside>\n  );\n});\n\nSidebar.propTypes = {\n  handleOpenSidebar: PropTypes.func.isRequired,\n  handleOpenContact: PropTypes.func.isRequired,\n  isOpenSidebar: PropTypes.bool.isRequired,\n};\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './ContactButton.scss';\n\nexport const ContactButton = memo(({ onClick, type, text, className }) => (\n  <button\n    type={type === 'submit' ? 'submit' : 'button'}\n    className={className}\n    onClick={onClick}\n  >\n    <span />\n    <span />\n    <span />\n    <span />\n    {text}\n  </button>\n));\n\nContactButton.propTypes = {\n  onClick: PropTypes.func,\n  type: PropTypes.string,\n  className: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nContactButton.defaultProps = {\n  type: 'button',\n  onClick: () => {},\n};\n","import PropTypes from 'prop-types';\n\nexport const FormDataShape = PropTypes.shape({\n  userName: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  massage: PropTypes.string.isRequired,\n});\n","import PropTypes from 'prop-types';\n\nexport const FormErrorsShape = PropTypes.shape({\n  userNameError: PropTypes.bool.isRequired,\n  emailError: PropTypes.bool.isRequired,\n});\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\n\nimport { ContactButton } from '../ContactButton/ContactButton';\n\nimport './ContactForm.scss';\n\nimport { FormDataShape } from '../../../shapes/FormDataShape';\nimport { FormErrorsShape } from '../../../shapes/FormErrorsShape';\n\nexport const ContactForm = memo(({\n  handleCancel,\n  handleSubmit,\n  formData,\n  errors,\n  handleChange,\n  handleReset,\n  handleBlur,\n}) => {\n  const { userName, email, massage } = formData;\n  const { userNameError, emailError } = errors;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label\n        className={classNames(\n          'ContactForm__input-label', {\n            'ContactForm__input-label--is-error': userNameError,\n          },\n        )}\n      >\n        Your name*\n        {userNameError && (\n          <span className=\"error\">\n            is required !\n          </span>\n        )}\n        <input\n          className=\"ContactForm__input\"\n          type=\"text\"\n          name=\"name\"\n          value={userName}\n          required\n          onChange={event => handleChange('userName')(event)}\n          onBlur={() => handleBlur('userName')}\n        />\n      </label>\n\n      <label\n        className={classNames(\n          'ContactForm__input-label', {\n            'ContactForm__input-label--is-error': emailError,\n          },\n        )}\n      >\n        Your email*\n        {emailError && (\n          <span className=\"error\">\n            is required !\n          </span>\n        )}\n        <input\n          className=\"ContactForm__input\"\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          required\n          onChange={event => handleChange('email')(event)}\n          onBlur={() => handleBlur('email')}\n        />\n      </label>\n\n      <label className=\"ContactForm__input-label\">\n        Your massage\n        <textarea\n          className=\"ContactForm__input\"\n          name=\"massage\"\n          value={massage}\n          onChange={event => handleChange('massage')(event)}\n          onBlur={() => handleBlur('massage')}\n        />\n      </label>\n\n      <ContactButton\n        type=\"submit\"\n        className=\"ContactButton ContactButton--submit\"\n        text=\"Submit\"\n      />\n\n      <ContactButton\n        className=\"ContactButton ContactButton--reset\"\n        onClick={handleReset}\n        text=\"Reset\"\n      />\n\n      <ContactButton\n        type=\"button\"\n        className=\"ContactButton ContactButton--cancel\"\n        onClick={handleCancel}\n        text=\"Cancel\"\n      />\n    </form>\n  );\n});\n\nContactForm.propTypes = {\n  formData: FormDataShape.isRequired,\n  errors: FormErrorsShape.isRequired,\n  handleCancel: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  handleReset: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  handleBlur: PropTypes.func.isRequired,\n};\n","import React, { useState, useCallback, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { ContactButton } from './ContactButton/ContactButton';\nimport { ContactForm } from './ContactForm/ContactForm';\n\nimport './Contact.scss';\n\nconst initialData = {\n  userName: '',\n  email: '',\n  massage: '',\n};\n\nexport const Contact = memo(({ handleOpenContact }) => {\n  const [formData, setFormData] = useState(initialData);\n  const [errors, setErrors] = useState({\n    userNameError: false,\n    emailError: false,\n  });\n  const [isSuccess, setIsSuccess] = useState(false);\n\n  // eslint-disable-next-line max-len,no-control-regex\n  const patternEmail = /^(([^<>()\\\\[\\]\\\\.,;:\\s@\\\\\"]+(\\.[^<>()\\\\[\\]\\\\.,;:\\s@\\\\\"]+)*)|(\\\\\".+\\\\\"))@(([^<>()[\\]\\\\.,;:\\s@\\\\\"]+\\.)+[^<>()[\\]\\\\.,;:\\s@\\\\\"]{2,})$/i;\n\n  const handleChange = name => ({ target: { value } }) => {\n    setFormData(oldData => ({\n      ...oldData,\n      [name]: value,\n    }));\n    setErrors({\n      userNameError: false,\n      emailError: false,\n    });\n  };\n\n  const handleReset = useCallback(() => {\n    setFormData(initialData);\n    setErrors({\n      userNameError: false,\n      emailError: false,\n    });\n  }, []);\n\n  const handleCancel = useCallback(() => {\n    handleReset();\n    setIsSuccess(false);\n    handleOpenContact();\n  }, []);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (formData.userName.length < 2) {\n      setErrors(oldErrors => ({\n        ...oldErrors,\n        userNameError: false,\n      }));\n\n      return;\n    }\n\n    if (!patternEmail.test(formData.email)) {\n      setErrors(oldErrors => ({\n        ...oldErrors,\n        emailError: false,\n      }));\n\n      return;\n    }\n\n    setIsSuccess(true);\n  };\n\n  const handleBlur = (name) => {\n    setFormData(oldData => ({\n      ...oldData,\n      [name]: oldData[name].trim(),\n    }));\n  };\n\n  return (\n    <div className=\"wrapper\">\n      { isSuccess ? (\n        <div className=\"container\">\n          <h2>Thank you:)</h2>\n          <ContactButton\n            type=\"button\"\n            className=\"ContactButton ContactButton--cancel\"\n            onClick={handleOpenContact}\n            text=\"Cancel\"\n          />\n        </div>\n      ) : (\n        <div className=\"container\">\n          <h2>Contact</h2>\n          <ContactForm\n            formData={formData}\n            errors={errors}\n            handleCancel={handleCancel}\n            handleChange={handleChange}\n            handleBlur={handleBlur}\n            handleReset={handleReset}\n            handleSubmit={handleSubmit}\n          />\n        </div>\n      )\n      }\n    </div>\n  );\n});\n\nContact.propTypes = {\n  handleOpenContact: PropTypes.func.isRequired,\n};\n","import React, { useEffect, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoShape } from '../../shapes/TodoShape';\n\nimport { TodoList } from '../MainPage/TodoList/TodoList';\n\nexport const CompletedPage = memo(({\n  isFilter,\n  filteredTodos,\n  todos,\n  onTodoUpdate,\n  onTodoDelete,\n  onTodoComplete,\n  onTodosFilterCompleted,\n  // eslint-disable-next-line react/prop-types\n  match,\n}) => {\n  // eslint-disable-next-line react/prop-types\n  const { completed } = match.params;\n\n  useEffect(() => {\n    onTodosFilterCompleted(!!(+completed));\n  }, [completed]);\n\n  return (\n    <TodoList\n      isFilter={isFilter}\n      todos={todos}\n      filteredTodos={filteredTodos}\n      onTodoUpdate={onTodoUpdate}\n      onTodoDelete={onTodoDelete}\n      onTodoComplete={onTodoComplete}\n    />\n  );\n});\n\nCompletedPage.propTypes = {\n  todos: PropTypes.arrayOf(TodoShape).isRequired,\n  filteredTodos: PropTypes.arrayOf(TodoShape).isRequired,\n  isFilter: PropTypes.bool.isRequired,\n  onTodoUpdate: PropTypes.func.isRequired,\n  onTodoDelete: PropTypes.func.isRequired,\n  onTodoComplete: PropTypes.func.isRequired,\n  onTodosFilterCompleted: PropTypes.func.isRequired,\n};\n","import React, { useState, memo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Select } from '../Select/Select';\nimport { Input } from '../Input/Input';\n\nimport './Filters.scss';\n\nexport const Filters = memo(({\n  onTodosFilterByCategory,\n  onTodosFilterByQuery,\n  onFilter,\n}) => {\n  const [category, setCategory] = useState('');\n  const [query, setQuery] = useState('');\n\n  const handleChangeSelector = ({ target }) => {\n    if (target.value === '') {\n      onFilter(false);\n      setCategory(target.value);\n\n      return;\n    }\n\n    onFilter(true);\n    setCategory(target.value);\n    onTodosFilterByCategory(target.value);\n  };\n\n  const handleChangeInput = ({ target }) => {\n    if (target.value === '') {\n      onFilter(false);\n      setQuery(target.value);\n\n      return;\n    }\n\n    onFilter(true);\n    setQuery(target.value);\n    onTodosFilterByQuery(target.value);\n  };\n\n  return (\n    <div className=\"Filters\">\n      <Select\n        className=\"Filters__select\"\n        onChange={handleChangeSelector}\n        value={category}\n        name=\"category\"\n        defaultValue=\"Filter by categories\"\n      />\n\n      <Input\n        className=\"Filters__input\"\n        classNameLabel=\"Header__input-label\"\n        placeholder=\"Filter by todo title\"\n        onChange={handleChangeInput}\n        name=\"search\"\n        value={query}\n      />\n    </div>\n  );\n});\n\nFilters.propTypes = {\n  onTodosFilterByCategory: PropTypes.func.isRequired,\n  onTodosFilterByQuery: PropTypes.func.isRequired,\n  onFilter: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { MainPage } from './components/MainPage/MainPage';\nimport { Header } from './components/Header/Header';\nimport { Sidebar } from './components/Sidebar/Sidebar';\nimport { Contact } from './components/Contact/Contact';\nimport { CompletedPage } from './components/CompletedPage/CompletedPage';\nimport { Filters } from './components/Filters/Filters';\n\nimport { ThemeProvider } from './context/ThemeContext';\n\nimport { getTodos, getFilteredTodos } from './store/index';\nimport { actions as todosActions } from './store/todos';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodos);\n  const filteredTodos = useSelector(getFilteredTodos);\n  const [isFilter, setIsFilter] = useState(false);\n  const [isOpenSidebar, setIsOpenSidebar] = useState(false);\n  const [isOpenContact, setIsOpenContact] = useState(false);\n\n  const addTodo = (todo) => {\n    dispatch(todosActions.add(todo));\n  };\n\n  const onTodoComplete = (todoId) => {\n    dispatch(todosActions.complete(todoId));\n  };\n\n  const onTodoUpdate = (todoId, newTitle) => {\n    dispatch(todosActions.update(todoId, newTitle));\n  };\n\n  const onTodoDelete = (todoId) => {\n    dispatch(todosActions.delete(todoId));\n  };\n\n  const onTodosFilterByCategory = (category) => {\n    dispatch(todosActions.filterByCategory(category));\n  };\n\n  const onTodosFilterByQuery = (query) => {\n    dispatch(todosActions.filterByQuery(query));\n  };\n\n  const onTodosFilterCompleted = (completed) => {\n    onFilter(true);\n    dispatch(todosActions.filterByCompleted(completed));\n  };\n\n  const onFilter = (bool) => {\n    setIsFilter(bool);\n  };\n\n  const handleOpenSidebar = () => {\n    setIsOpenSidebar(current => !current);\n  };\n\n  const handleOpenContact = () => {\n    setIsOpenContact(current => !current);\n  };\n\n  return (\n    <ThemeProvider>\n      <>\n        <Header\n          onTodosFilterByCategory={onTodosFilterByCategory}\n          onTodosFilterByQuery={onTodosFilterByQuery}\n          onFilter={onFilter}\n          handleOpenSidebar={handleOpenSidebar}\n        />\n        <main>\n          <h2>\n            Todos\n            <Route path=\"/todos/completed/1\"> - Completed</Route>\n            <Route path=\"/todos/completed/0\"> - Uncompleted</Route>\n          </h2>\n\n          <Switch>\n            <Route\n              path=\"/todos/completed/:completed\"\n              render={({ match }) => (\n                <CompletedPage\n                  match={match}\n                  todos={todos}\n                  filteredTodos={filteredTodos}\n                  isFilter={isFilter}\n                  onTodoComplete={onTodoComplete}\n                  onTodoUpdate={onTodoUpdate}\n                  onTodoDelete={onTodoDelete}\n                  onTodosFilterCompleted={onTodosFilterCompleted}\n                />\n              )}\n            />\n\n            <Route\n              path=\"/todos\"\n              render={() => (\n                <>\n                  <Filters\n                    onTodosFilterByCategory={onTodosFilterByCategory}\n                    onTodosFilterByQuery={onTodosFilterByQuery}\n                    onFilter={onFilter}\n                  />\n                  <MainPage\n                    addTodo={addTodo}\n                    isFilter={isFilter}\n                    onFilter={onFilter}\n                    todos={todos}\n                    filteredTodos={filteredTodos}\n                    onTodoComplete={onTodoComplete}\n                    onTodoUpdate={onTodoUpdate}\n                    onTodoDelete={onTodoDelete}\n                  />\n                </>\n              )}\n            />\n\n            <Redirect to=\"/todos\" />\n          </Switch>\n        </main>\n\n        <Sidebar\n          isOpenSidebar={isOpenSidebar}\n          handleOpenSidebar={handleOpenSidebar}\n          handleOpenContact={handleOpenContact}\n        />\n        {isOpenContact && (\n          <Contact\n            handleOpenContact={handleOpenContact}\n          />\n        )}\n      </>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}