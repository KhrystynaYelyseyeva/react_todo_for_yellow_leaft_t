{"version":3,"sources":["api/todos.js","store/todos.js","store/index.js","api/categories.js","components/Select/Select.js","components/Header/Header.js","shapes/TodoShape.js","components/Main/TodoList/Todo/Todo.js","components/Main/TodoList/TodoList.js","components/Input/Input.js","components/Main/NewTodoForm/NewTodoForm.js","components/Main/Main.js","App.js","index.js"],"names":["todos","id","title","category","completed","ADD","COMPLETE","UPDATE","DELETE","FILTER","actions","todo","type","todoId","newTitle","todosReducer","initialTodos","action","map","currentCompleted","filter","getTodos","state","reducer","combineReducers","store","createStore","categories","Select","name","value","onChange","className","htmlFor","Header","onTodosFilter","useState","setCategory","viewBox","d","target","PropTypes","shape","number","isRequired","string","bool","Todo","onTodoDelete","onTodoUpdate","onTodoComplete","checked","readOnly","classNames","onClick","TodoList","Input","placeholder","NewTodoForm","addTodo","newId","setTitle","titleError","setTitleError","categoryError","setCategoryError","onSubmit","event","preventDefault","trim","Main","length","App","dispatch","useDispatch","useSelector","todosActions","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.94714157.chunk.js","sourcesContent":["const todos = [\n  {\n    id: 1,\n    title: 'learn TypeScript',\n    category: 'education',\n    completed: true,\n  },\n  {\n    id: 2,\n    category: 'health',\n    title: 'provide a blood test',\n    completed: false,\n  },\n];\n\nexport default todos;\n","import initialTodos from '../api/todos';\n\nconst ADD = 'todos/ADD';\nconst COMPLETE = 'todos/COMPLETE';\nconst UPDATE = 'todos/UPDATE';\nconst DELETE = 'todos/DELETE';\nconst FILTER = 'todos/FILTER';\n\nexport const actions = {\n  add: todo => ({\n    type: ADD,\n    todo,\n  }),\n  complete: todoId => ({\n    type: COMPLETE,\n    todoId,\n  }),\n  update: (todoId, newTitle) => ({\n    type: UPDATE,\n    todoId,\n    newTitle,\n  }),\n  delete: todoId => ({\n    type: DELETE,\n    todoId,\n  }),\n  filter: category => ({\n    type: FILTER,\n    category,\n  }),\n};\n\nconst todosReducer = (todos = initialTodos, action) => {\n  switch (action.type) {\n    case ADD:\n      return [...todos, action.todo];\n    case COMPLETE:\n      return todos.map((todo) => {\n        if (todo.id === action.todoId) {\n          const currentCompleted = todo.completed;\n\n          return {\n            ...todo,\n            completed: !currentCompleted,\n          };\n        }\n\n        return todo;\n      });\n    case UPDATE:\n      return todos.map((todo) => {\n        if (todo.id === action.todoId) {\n          return {\n            ...todo,\n            title: action.newTitle,\n          };\n        }\n\n        return todo;\n      });\n    case DELETE:\n      return todos.filter(todo => todo.id !== action.todoId);\n    case FILTER:\n      return todos.filter(todo => todo.category === action.category);\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, combineReducers } from 'redux';\n\nimport todosReducer from './todos';\n\n// #region selectors\nexport function getTodos(state) {\n  return state.todos;\n}\n// #endregin\n\nconst reducer = combineReducers({\n  todos: todosReducer,\n});\n\nconst store = createStore(reducer);\n\nexport default store;\n","export const categories = ['education', 'health', 'fun'];\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { categories } from '../../api/categories';\n\nexport const Select = ({ name, value, onChange, className }) => (\n  <label htmlFor={name}>\n    <select\n      name={name}\n      id={name}\n      value={value}\n      onChange={onChange}\n      className={className}\n    >\n      <option value=\"\">\n        Choose category\n      </option>\n      {categories.map(category => (\n        <option value={category} key={category}>\n          {category}\n        </option>\n      ))}\n    </select>\n  </label>\n);\n\nSelect.propTypes = {\n  name: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Select } from '../Select/Select';\n\nimport './Header.scss';\n\nexport const Header = ({ onTodosFilter }) => {\n  const [category, setCategory] = useState('');\n\n  const handleChangeSelector = ({ target }) => {\n    setCategory(target.value);\n    onTodosFilter(target.value);\n  };\n\n  return (\n    <header className=\"Header\">\n      <svg\n        className=\"Header__logo\"\n        id=\"icon-logo-leaf\"\n        viewBox=\"0 0 364 604\"\n      >\n        <title>logo</title>\n        {/* eslint-disable-next-line max-len */}\n        <path d=\"M181.9,23.1c0,0,64.6,50.5,111.6,126.9l-85.2,223.2L108.1,98.6h-1C145.3,51.8,181.9,23.1,181.9,23.1z M22.2,302  c0-57.9,22.6-111.7,50.7-156.3l110.2,293.1l-40.5,106.1C95.3,497.1,22.2,406.4,22.2,302z M182.1,580.8l141.5-371  c11.1,28.8,18.2,59.8,18.2,92.2C341.6,454.1,186.1,577.7,182.1,580.8z\" />\n      </svg>\n\n      <Select\n        className=\"Header__selector\"\n        onChange={handleChangeSelector}\n        value={category}\n        name=\"category\"\n      />\n\n      <button type=\"button\" className=\"Header__btn Header__btn--dark\">\n        switch&nbsp;\n        <span>DARK</span>\n      </button>\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  onTodosFilter: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const TodoShape = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  category: PropTypes.string.isRequired,\n}).isRequired;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport { TodoShape } from '../../../../shapes/TodoShape';\n\nimport './Todo.scss';\n\nexport const Todo = ({ todo, onTodoDelete, onTodoUpdate, onTodoComplete }) => {\n  const { id, title, completed, category } = todo;\n\n  return (\n    <div className=\"Todo\">\n      <label className=\"Todo__checkbox-label\">\n        <input\n          className=\"Todo__checkbox\"\n          type=\"checkbox\"\n          checked={completed}\n          readOnly\n          onChange={() => onTodoComplete(id)}\n        />\n        <span />\n      </label>\n\n      <label className=\"Todo__title-label\">\n        <input\n          className={classNames(\n            'Todo__title',\n            {\n              'Todo__title--is-completed': completed,\n            },\n          )}\n          type=\"text\"\n          value={title}\n          onChange={({ target }) => onTodoUpdate(id, target.value)}\n        />\n      </label>\n\n      <span className={classNames(\n        'Todo__category',\n        {\n          'Todo__category--is-completed': completed,\n        },\n      )}\n      >\n        {category}\n      </span>\n\n      <button\n        className=\"Todo__delete-btn\"\n        type=\"button\"\n        onClick={() => onTodoDelete(id)}\n      >\n        X\n      </button>\n    </div>\n  );\n};\n\nTodo.propTypes = {\n  todo: TodoShape.isRequired,\n  onTodoUpdate: PropTypes.func.isRequired,\n  onTodoDelete: PropTypes.func.isRequired,\n  onTodoComplete: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport { TodoShape } from '../../../shapes/TodoShape';\nimport { Todo } from './Todo/Todo';\n\nexport const TodoList = ({\n  todos,\n  onTodoDelete,\n  onTodoComplete,\n  onTodoUpdate,\n}) => (\n  <ul className=\"list\">\n    {\n      todos.map(todo => (\n        <li\n          className={\n            classNames('list__item item', { 'item--completed': todo.completed })\n          }\n          key={todo.id}\n        >\n          <Todo\n            todo={todo}\n            onTodoComplete={onTodoComplete}\n            onTodoUpdate={onTodoUpdate}\n            onTodoDelete={onTodoDelete}\n          />\n        </li>\n      ))\n    }\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(TodoShape).isRequired,\n  onTodoUpdate: PropTypes.func.isRequired,\n  onTodoDelete: PropTypes.func.isRequired,\n  onTodoComplete: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Input = ({ name, value, onChange, placeholder, className }) => (\n  <label htmlFor={name} className={`${className}-label`}>\n    <input\n      type=\"text\"\n      name={name}\n      id={name}\n      placeholder={placeholder}\n      value={value}\n      onChange={onChange}\n      className={className}\n    />\n  </label>\n);\n\nInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from '../../Input/Input';\nimport { Select } from '../../Select/Select';\n\nimport './NewTodoForm.scss';\n\nexport const NewTodoForm = ({ addTodo, newId }) => {\n  const [category, setCategory] = useState('');\n  const [title, setTitle] = useState('');\n  const [titleError, setTitleError] = useState(false);\n  const [categoryError, setCategoryError] = useState(false);\n\n  const handleChangeInput = ({ target }) => {\n    setTitle(target.value);\n    setTitleError(false);\n  };\n\n  const handleChangeSelector = ({ target }) => {\n    setCategory(target.value);\n    setCategoryError(false);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (!title.trim()) {\n      setTitleError(true);\n\n      return;\n    }\n\n    if (!category) {\n      setCategoryError(true);\n\n      return;\n    }\n\n    addTodo({\n      title,\n      category,\n      completed: false,\n      id: newId,\n    });\n\n    setCategory('');\n    setTitle('');\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className=\"NewTodoForm\">\n        <Input\n          className=\"NewTodoForm__input\"\n          value={title}\n          name=\"title\"\n          placeholder=\"Enter new task\"\n          onChange={handleChangeInput}\n        />\n        <Select\n          className=\"NewTodoForm__select\"\n          value={category}\n          name=\"category\"\n          onChange={handleChangeSelector}\n        />\n        <button type=\"submit\" className=\"NewTodoForm__btn\">\n          +\n        </button>\n      </form>\n      {titleError && (\n        <span className=\"Error-massage\">Please enter the title</span>\n      )}\n      {categoryError && (\n        <span className=\"Error-massage\">Please choose the category</span>\n      )}\n    </>\n  );\n};\n\nNewTodoForm.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n  newId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoShape } from '../../shapes/TodoShape';\nimport { TodoList } from './TodoList/TodoList';\nimport { NewTodoForm } from './NewTodoForm/NewTodoForm';\n\nconst INCREMENT_NEW_ID = 1;\n\nexport const Main = ({\n  addTodo,\n  todos,\n  onTodoDelete,\n  onTodoUpdate,\n  onTodoComplete,\n}) => (\n  <main className=\"Main\">\n    <NewTodoForm\n      addTodo={addTodo}\n      newId={todos.length + INCREMENT_NEW_ID}\n    />\n    {!!todos.length && (\n      <TodoList\n        todos={todos}\n        onTodoUpdate={onTodoUpdate}\n        onTodoDelete={onTodoDelete}\n        onTodoComplete={onTodoComplete}\n      />\n    )}\n  </main>\n);\n\nMain.propTypes = {\n  todos: PropTypes.arrayOf(TodoShape).isRequired,\n  addTodo: PropTypes.func.isRequired,\n  onTodoUpdate: PropTypes.func.isRequired,\n  onTodoDelete: PropTypes.func.isRequired,\n  onTodoComplete: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { Header } from './components/Header/Header';\nimport { Main } from './components/Main/Main';\n\nimport { getTodos } from './store';\nimport { actions as todosActions } from './store/todos';\n\nimport './App.css';\nimport './styles/general.scss';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodos);\n\n  const addTodo = (todo) => {\n    dispatch(todosActions.add(todo));\n  };\n\n  const onTodoComplete = (todoId) => {\n    dispatch(todosActions.complete(todoId));\n  };\n\n  const onTodoUpdate = (todoId, newTitle) => {\n    dispatch(todosActions.update(todoId, newTitle));\n  };\n\n  const onTodoDelete = (todoId) => {\n    dispatch(todosActions.delete(todoId));\n  };\n\n  const onTodosFilter = (todoId) => {\n    dispatch(todosActions.filter(todoId));\n  };\n\n  return (\n    <div className=\"App\">\n      <Header onTodosFilter={onTodosFilter} />\n      <Main\n        addTodo={addTodo}\n        todos={todos}\n        onTodoComplete={onTodoComplete}\n        onTodoUpdate={onTodoUpdate}\n        onTodoDelete={onTodoDelete}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}